=================================
asyncore-based NGI implementation
=================================

The async module provides an NGI implementation based on the Python
standard asyncore framework.  It provides 2 objects to be invoked
directly by applications:

connector
   an implementation of the NGI IConnector interface

listener
   an implementation of the NGI IListener interface

The implementation creates a dedicated thread to run an asyncore main
loop on import.

There's nothing else to say about the implementation from a usage
point of view.  The remainder of this document provides a
demonstration (test) of using the impemantation to create a simple
word-count server and client.

Demonstration: wordcount
========================

The wordcount module has a simple word-count server and client
implementation.  We'll run these using the async implementation.

Let's start the wordcount server:

    >>> import zc.ngi.wordcount
    >>> import zc.ngi.async
    >>> port = zc.ngi.wordcount.start_server_process(zc.ngi.async.listener)

We passed the module and name of the listener to be used.

Now, we'll start a number of threads that connect to the server and
check word counts of some sample documents.  If all goes well, we
shouldn't get any output.

    >>> import threading
    >>> addr = 'localhost', port
    >>> threads = [threading.Thread(target=zc.ngi.wordcount.client_thread,
    ...                             args=(zc.ngi.async.connector, addr))
    ...            for i in range(200)]

    >>> _ = [thread.start() for thread in threads]
    >>> _ = [thread.join() for thread in threads]
    
    >>> zc.ngi.wordcount.stop_server_process(zc.ngi.async.connector, addr)
